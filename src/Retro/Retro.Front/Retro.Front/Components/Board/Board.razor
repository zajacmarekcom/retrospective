@using Retro.Front.Components.Board.Dtos

<CascadingValue Value="this" IsFixed="true">
    <div class="grid grid-cols-3 gap-4 select-none">
        @ChildContent
    </div>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    [Parameter]
    public List<BoardItemDto> Items { get; set; } = [];
    
    [Parameter]
    public required Func<BoardItemDto, Task> OnItemCreated { get; set; }

    private BoardItem? _selectedItem;
    private List<BoardColumn> _columns = [];

    public void AddColumn(BoardColumn column)
    {
        column.Items = Items;
        _columns.Add(column);
    }

    public void OnItemDropped(BoardItemType newType)
    {
        if (_selectedItem == null) return;
        Items[Items.IndexOf(_selectedItem.Item)] = _selectedItem.Item with { Type = newType };
        foreach (var column in _columns)
        {
            column.HideTemporaryItem();
        }
        _selectedItem?.OnDropped();
        _selectedItem = null;
        StateHasChanged();
    }

    public void OnPointerEnter(BoardColumn selectedColumn)
    {
        if (_selectedItem is null) return;
        foreach (var column in _columns.Where(column => column != selectedColumn))
        {
            column.HideTemporaryItem();
        }
        selectedColumn.ShowTemporaryItem();
        StateHasChanged();
    }

    public void OnPointerLeave(BoardColumn column)
    {
        column.HideTemporaryItem();
        StateHasChanged();
    }

    public void OnItemDragStart(BoardItem item)
    {
        _selectedItem = item;
    }
    
    public async Task AddItem(BoardItemType type)
    {
        var item = new BoardItemDto("New item", true, 0, type);
        await OnItemCreated(item);
    }
}