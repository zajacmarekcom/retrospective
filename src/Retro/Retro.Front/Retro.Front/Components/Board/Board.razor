@using Retro.Front.Components.Board.Dtos

<CascadingValue Value="this" IsFixed="true">
    <div class="grid grid-cols-3 gap-4">
        @ChildContent
    </div>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    [Parameter]
    public List<BoardItemDto> Items { get; set; } = [new BoardItemDto("Test title title title", true, 0, BoardItemType.Good), new BoardItemDto("Test title", true, 0, BoardItemType.Good)];

    private BoardItem? _selectedItem;
    private List<BoardColumn> _columns = new();

    public void AddColumn(BoardColumn column)
    {
        column.Items = Items;
        _columns.Add(column);
    }

    public void OnItemDropped(BoardItemType newType)
    {
        if (_selectedItem != null)
        {
            Items[Items.IndexOf(_selectedItem.Item)] = _selectedItem.Item with { Type = newType };
            foreach (var column in _columns)
            {
                column.HideTemporaryItem();
            }
            OnItemDragEnd();
            StateHasChanged();
        }
    }

    public void OnPointerEnter(BoardColumn selectedColumn)
    {
        if (_selectedItem is not null)
        {
            foreach (var column in _columns)
            {
                if (column != selectedColumn)
                    column.HideTemporaryItem();
            }
            selectedColumn.ShowTemporaryItem();
            StateHasChanged();
        }
    }

    public void OnPointerLeave(BoardColumn column)
    {
        column.HideTemporaryItem();
        StateHasChanged();
    }

    public void OnItemDragStart(BoardItem item)
    {
        _selectedItem = item;
    }

    public void OnItemDragEnd()
    {
        _selectedItem?.OnDropped();
        _selectedItem = null;
        StateHasChanged();
    }

}