@using Retro.Front.Components.Board.Dtos

<div class="border border-solid p-4" @onpointerenter="@(OnPointerEnter)" @onpointerleave="@(OnPointerLeave)" @onpointerup="@(OnItemDropped)">
    @if (_showTemporaryItem)
    {
        <TemporaryBoardItem />
    }
    @foreach(var item in FilteredItems)
    {
        <BoardItem Item="item"></BoardItem>
    }
</div>

@code {
    [CascadingParameter]
    public Board? Board { get; set; }
    [Parameter]
    public required BoardItemType Type { get; set; }
    [Parameter]
    public IEnumerable<BoardItemDto> Items { get; set; } = new List<BoardItemDto>();
    
    private IEnumerable<BoardItemDto> FilteredItems => Items.Where(x => x.Type == Type);
    
    private bool _showTemporaryItem;

    protected override void OnInitialized()
    {
        Board?.AddColumn(this);
    }

    public void ShowTemporaryItem()
    {
        _showTemporaryItem = true;
        StateHasChanged();
    }

    public void HideTemporaryItem()
    {
        _showTemporaryItem = false;
        StateHasChanged();
    }

    private void OnItemDropped()
    {
        Board?.OnItemDropped(Type);
        StateHasChanged();
    }
    
    private void OnPointerEnter()
    {
        Board?.OnPointerEnter(this);
    }
    
    private void OnPointerLeave()
    {
        Board?.OnPointerLeave(this);
    }
}